{
  uniforms: {
    iTime: {
      value: null,
      needsUpdate: true,
    },
    iTimeS: {
      value: null,
      needsUpdate: true,
    },
    startTime: {
      value: null,
      needsUpdate: true,
    },
    iResolution: {
      value: null,
      needsUpdate: true,
    },
    animTime: {
      value: 6.0,
      needsUpdate: true,
    },
    pColor1: {
      value: [0, 1, 0],
      needsUpdate: true,
    },
    pColor2: {
      value: [1, 1, 0],
      needsUpdate: true,
    },
    pColor3: {
      value: [0, 0, 0],
      needsUpdate: true,
    },
    bgColor: {
      value: [0, 0, 0],
      needsUpdate: true,
    },
    arrowColor: {
      value: [0.25, 0.25, 0.25],
      needsUpdate: true,
    },
    hBgWidth: {
      value: 0.35,
      needsUpdate: true,
    },
    shBgWidth: {
      value: 0.27,
      needsUpdate: true,
    },
    showBg: {
      value: false,
      needsUpdate: true,
    },
    startValue: {
      value: 0.0,
      needsUpdate: true,
    },
    endValue: {
      value: 0.0,
      needsUpdate: true,
    },
  },
  vertexShader: `\
    precision highp float;
    precision highp int;

    // uniform vec2 iResolution;
    varying vec2 vUv;

    void main() {
      gl_Position = vec4(position.x, position.y, -0.1, 1.);

      vUv = uv;
      // vUv.y *= iResolution.y/iResolution.x;
    }
  `,
  fragmentShader: `\
    precision highp float;
    precision highp int;

    uniform float iTimeS;
    uniform vec2 iResolution;
    uniform float startTime;
    uniform float animTime;
    uniform vec3 pColor1;
    uniform vec3 pColor2;
    uniform vec3 pColor3;
    uniform vec3 bgColor;
    uniform vec3 arrowColor;
    uniform float hBgWidth;
    uniform float shBgWidth;
    uniform float startValue;
    uniform float endValue;
    uniform bool showBg;

    varying vec2 vUv;

    #define PI 3.1415926535897932384626433832795

    const float leftWidth = 400.;
    
    vec2 rotateCCW(vec2 pos, float angle) { 
      float ca = cos(angle),  sa = sin(angle);
      return pos * mat2(ca, sa, -sa, ca);  
    }
    
    vec2 rotateCCW(vec2 pos, vec2 around, float angle) { 
      pos -= around;
      pos = rotateCCW(pos, angle);
      pos += around;
      return pos;
    }

    // return 1 if v inside the box, return 0 otherwise
    bool insideAABB(vec2 v, vec2 bottomLeft, vec2 topRight) {
      vec2 s = step(bottomLeft, v) - step(topRight, v);
      return s.x * s.y > 0.;
    }

    bool isPointInTriangle(vec2 point, vec2 a, vec2 b, vec2 c) {
      vec2 v0 = c - a;
      vec2 v1 = b - a;
      vec2 v2 = point - a;

      float dot00 = dot(v0, v0);
      float dot01 = dot(v0, v1);
      float dot02 = dot(v0, v2);
      float dot11 = dot(v1, v1);
      float dot12 = dot(v1, v2);

      float invDenom = 1. / (dot00 * dot11 - dot01 * dot01);
      float u = (dot11 * dot02 - dot01 * dot12) * invDenom;
      float v = (dot00 * dot12 - dot01 * dot02) * invDenom;

      return (u >= 0.) && (v >= 0.) && (u + v < 1.);
    }

    vec4 createArrow(vec2 pos, float width, float height, vec3 aColor, vec4 color) {
        // root
        float angle = -0.78;

        vec2 dimL = vec2(width, height);
        vec2 dimR = vec2(height, width);

        vec2 pivot = (vec2(dimL.x, dimR.y) / 2.);
        
        pos -= pivot;
        pivot += pos;

        vec2 bottomLeft = pos;
        vec2 topRight = bottomLeft + dimL;
        // derived
        vec2 bottomRight = vec2(topRight.x, bottomLeft.y);
        vec2 topLeft = vec2(bottomLeft.x, topRight.y);

        bottomLeft = rotateCCW(bottomLeft, pivot, angle);
        topRight = rotateCCW(topRight, pivot, angle);
        bottomRight = rotateCCW(bottomRight, pivot, angle);
        topLeft = rotateCCW(topLeft, pivot, angle);

        if (
          isPointInTriangle(vUv, bottomLeft, bottomRight, topRight) ||
          isPointInTriangle(vUv, bottomLeft, topLeft, topRight)
        ) {
          color.rgb = aColor;
          color.a = 1.;
        }

        bottomLeft = pos;
        topRight = bottomLeft + dimR;

        // derived
        bottomRight = vec2(topRight.x, bottomLeft.y);
        topLeft = vec2(bottomLeft.x, topRight.y);

        bottomLeft = rotateCCW(bottomLeft, pivot, angle);
        topRight = rotateCCW(topRight, pivot, angle);
        bottomRight = rotateCCW(bottomRight, pivot, angle);
        topLeft = rotateCCW(topLeft, pivot, angle);

        if (
          isPointInTriangle(vUv, bottomLeft, bottomRight, topRight) ||
          isPointInTriangle(vUv, bottomLeft, topLeft, topRight)
        ) {
          color.rgb = aColor;
          color.a = 1.;
        }

        return color;
    }

    void main() {
      vec4 color = vec4(0.0);
      
      float f = (iTimeS - startTime) / ((startTime + animTime/2.0) - startTime);
      f = clamp(f, 0., 1.);
      float v = startValue + (endValue - startValue) * f;
      
      if (showBg) {
        color = vec4(bgColor, 1.0);
      }

      {
        //// color part
        // float offset = max(-1.49, min(1.49, v));
        // float offset = v;
        float offset = 0.;

        vec2 bottomLeft = vec2(0.2, 0.4 - offset);
        vec2 topRight = vec2(0.2 + leftWidth/iResolution.x, 1. - offset);
        if (
          insideAABB(vUv, bottomLeft, topRight)
        ) {
          vec3 equation = vec3(0.5 * cos(12.5664 * vUv.y) + 0.5);
          color.rgb = mix(pColor1, pColor2, equation);
          color.a = 1.;
        } 
      }

      {
        //// arrows 
        float width = 0.012*2000./iResolution.x;
        float height = 0.16*1400./iResolution.x;
        vec2 distance = vec2(0.0, 0.07*1400./iResolution.y);
        float eq = mod(iTimeS, 0.35);
        // float offset = max(-1.49, min(1.49, v));
        float offset = 0.;
        vec2 pos = vec2(0.2 + leftWidth/iResolution.x/2., 1. - offset - 0.2 * eq);
        vec3 aColor = arrowColor;
        
        #pragma unroll_loop_start
        for (int i = 0; i < 16; i++) {
          if (pos.y >= 0.2) {
            color = createArrow(pos.xy, width, height, aColor, color);
            pos -= distance;
          }
        }
        #pragma unroll_loop_end
      }

      {
        //// black part
        // float offset = max(-1.49, min(1.49, v));
        float offset = 0.;

        vec2 bottomLeftb = vec2(0.2, 0.2 - offset);
        vec2 topRightb = vec2(0.2 + leftWidth/iResolution.x, 0.4 - offset);
        
        //// derived
        float width = topRightb.x - bottomLeftb.x;
        vec2 bottomRight = bottomLeftb + vec2(width, 0.);
        vec2 center = bottomLeftb + vec2(width/2., 0.);
        vec2 tipLeft = bottomLeftb + vec2(0., -0.08);
        vec2 tipRight = bottomRight + vec2(0., -0.08);
        if (
          insideAABB(vUv, bottomLeftb, topRightb) ||
          isPointInTriangle(vUv, bottomLeftb, tipLeft, center) ||
          isPointInTriangle(vUv, bottomRight, tipRight, center)
        ) {
          color.rgb = vec3(0.0);
          color.a = 1.;
        }
      }

      {
        //// heading
        {
          float offset = 0.;
          vec2 bottomLeft = vec2(0.55 - offset, 0.5);
          vec2 topRight = vec2(0.55 + hBgWidth - offset, 0.55);
          if (
            insideAABB(vUv, bottomLeft, topRight)
          ) {
            color.rgb = pColor1;
            color.a = 1.;
          }
        }
      }

      {
        //// sub-heading
        {
          float offset = 0.;
          vec2 bottomLeft = vec2(0.55 - offset, 0.4);
          vec2 topRight = vec2(0.55 + shBgWidth - offset, 0.45);
          if (
            insideAABB(vUv, bottomLeft, topRight)
          ) {
            color.rgb = pColor1;
            color.a = 1.;
          }
        }
      }

      gl_FragColor = vec4(color);
    }
  `,
  transparent: true,
  // depthTest: true,
}
